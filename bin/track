#!/bin/sh

set -u

# to save
DEST_DIR=

# git repo
PROJ_DIR=

# The Nth commit
NTH_COMMIT=

OLD_WD=

usage() {
   printf '%s: Get files from a specific commit ID.\n\n' "$0" >&2
   printf 'Usage: %s [-h] [-g PROJ_DIR] [-n NTH_COMMIT] [-d DEST_DIR]\n' "$0" >&2
   printf '\t-h: Display this help message and exit.\n' >&2
   printf '\t-g: Specify the path to the directory of the cloned repo. Defaults to $PWD.\n' >&2
   printf '\t-d: Specify the path to where to save the extracted files.\n' >&2
   printf '\t-n: Specify the NTH_COMMIT commit from where files are extracted.\n' >&2
   exit 1
}

check_dependencies() {
   local CMD=

   for CMD in git unzip ; do
      command -v "$CMD" >/dev/null || {
         printf "%s: ERROR: \`%s' not found\n" "$0" "$CMD"
         exit 1
      }
   done
}

get_opts() {
   while getopts :hd:g:n: OPTS ; do
      case "$OPTS" in
         h)
            usage ;;
         d)
            DEST_DIR=$OPTARG ;;
         g)
            PROJ_DIR=$OPTARG ;;
         n)
            expr "$OPTARG" : '[0-9]\+$' >/dev/null || {
               printf "%s: ERROR: \`-n' options takes a +ve integer as argument\n" "$0" >&2
               usage
            }
            NTH_COMMIT=$OPTARG ;;
         \?)
            usage ;;
      esac
   done
}

check_global_vars() {
   NTH_COMMIT=${NTH_COMMIT:-1}

   PROJ_DIR=`readlink -f "${PROJ_DIR:-.}"`
   if [ ! -d "$PROJ_DIR" ] ; then
      printf "%s: ERROR: \`%s' isn't a directory\n" "$0" "$PROJ_DIR" >&2
      exit 1
   fi
   if [ ! -x "$PROJ_DIR" ] ; then
      printf "%s: ERROR: cannot enter \`%s'\n" "$0" "$PROJ_DIR" >&2
      exit 1
   fi

   if [ -n "$DEST_DIR" ] ; then
      DEST_DIR=`readlink -f "$DEST_DIR"`
      if [ ! -w "$DEST_DIR" ] ; then
         printf "%s: ERROR: cannot write in \`%s'\n" "$0" "$DEST_DIR" >&2
         exit 1
      fi
   fi
}

get_files_from_commit_id() {
   local COMMITS= N_COMMITS= COMMIT_ID= WD=

   WD=`readlink -f "${PWD:-"$(pwd)"}"`
   if [ "$WD" != "$PROJ_DIR" ] ; then
      OLD_WD=$WD
      cd "$PROJ_DIR"
   fi

   git status >/dev/null 2>&1
   if test $? -ne 0 ; then
      printf "%s: ERROR: \`%s' isn't a git repo.\n" "$0" "$PROJ_DIR" >&2
      exit 1
   fi

   COMMITS=`git log | grep ^commit | awk '{print $2}'`
   N_COMMITS=`printf '%s\n' "$COMMITS" | wc -l`
   if test $N_COMMITS -lt $NTH_COMMIT ; then
      printf '%s: ERROR: max number of commits: %d.\n' "$0" "$N_COMMITS" >&2
      exit 1
   fi

   COMMIT_ID=`printf '%s\n' "$COMMITS" | tac | sed -n "${NTH_COMMIT}p"`
   if [ -z "$DEST_DIR" ] ; then
      if test -w . ; then
         DEST_DIR="${WD%%/}/$COMMIT_ID-$NTH_COMMIT"
         mkdir -p "$DEST_DIR"
      else
         printf "%s: ERROR: cannot write into \`%s'\n" "$0" "$WD" >&2
         exit 1
      fi
   fi

   ZIP_FILE=`mktemp -u /tmp/archive-XXXXXX`
   
   git archive $COMMIT_ID --format=zip --output $ZIP_FILE
   unzip -q -d "$DEST_DIR" $ZIP_FILE
   rm -f $ZIP_FILE

   [ "$OLD_WD" ] && cd "$OLD_WD"
}

track() {
   check_dependencies
   get_opts "$@"
   check_global_vars
   get_files_from_commit_id
}

track "$@"
