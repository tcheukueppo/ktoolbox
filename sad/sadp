#!/usr/bin/env sh
#
# sadp is use to control sad(simple audio daemon).
# this script is part of
#    <https://codeberg.org/tcheukueppo/scripts.git>
#
#                                  Author: kueppo

# config vars
sock='/tmp/sad-sock'
mudirs='/mnt2/media/musics/'

cachedir="${XDG_HOME_CACHE:-"$HOME/.cache"}"
cache="$cachedir/sadp"

func_exitprog ()
{
	if test ! -S $sock ; then
		printf 'no unix domain socket %s\n' "$sock"
		return 1
	fi
}

# to find for media files, you have to manually delete the cache.
func_use_cache ()
{
	test -f "$cache" || return 1

	local lnr slnr
	lnr=`cat "$cache" | wc -l`
	slnr=`cat "$cache" | grep '^add .\(mp3\|flac\|wav\|ogg\)$' | wc -l`

	# check file format
	if test $lnr -ne $slnr; then
		printf '%s: invalid file format\n' "$cache" >&2
		return 1
	fi
	lnr=`nc -q 0 -U $sock <<< 'playlist' | grep -v '^OK' | grep -v '^ERR' | wc -l`
	# check if already added
	if test $lnr -eq 0; then
		cat "$cache" | nc -q0 -U $sock &>/dev/null
	fi
}

func_add_playlist ()
{
	local path once=0

	# clear the playlist before adding anything
	func_search_add ()
	{
		local criter='-iname "*.mp3" -or -iname "*.ogg" -or -iname "*.flac" -or -iname "*.wav"'

		while read -r path; do
			path=`readlink -f $path`
			test -d "$path" && {
				if test $once -eq 0 ; then
					nc -q 0 -U $sock <<< 'clear'
					once=1
				fi
			} || continue
			eval find "$path" -type f $criter -exec printf 'add %s\n' '{}' \; | \
			tee $cache | nc -q0 -U $sock
		done
	}
	printf '%s' "$mudirs" | tr ':' '\n' | func_search_add
}

func_control_sad ()
{
	while getopts ':cknpsfld:a:r' action; do
		case $action in
		a|A)
			paths="$OPTARG"
			func_addlist &>/dev/null
			;;
		n|N) 
			pkill -fu "$USER" '/sadr$'
			nc -q0 -U $sock <<< 'next'
			;;
		p|P)
			pkill -fu "$USER" '/sadr$'
			nc -q0 -U $sock <<< 'prev'
			;;
		d|D) nc -q0 -U $sock <<< "remove $OPTARG" ;;
		c|C) nc -q0 -U $sock <<< 'clear' ;;
		k|K) nc -q0 -U $sock <<< 'kill' ;;
		s|S) nc -q0 -U $sock <<< 'stop' ;;
		f|F) nc -q0 -U $sock <<< 'pause' ;;
		r|R) nc -q0 -U $sock <<< 'random' ;;
		l|L) nc -q0 -U $sock <<< 'playlist' ;;
		*)
			echo 'invalid option' >&2
			return 1
			;;
		esac
	done
}

case $# in
0)
	func_ucache && func_add_playlist &>/dev/null ;;
1|2)
	func_control_sad "$@" ;;
*)  
	printf 'invalid number of arguments' >&2
	exit 1 ;;
esac
