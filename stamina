#!/usr/bin/env sh
#
# A script which provides a point to point connection to
# a USB modem(ex: /dev/ttyUSB*, ...). its dependencies are:
#	usb_modeswitch, ModemManager, NetworkManager, systemd
#
#          From: https://codeberg.org@tcheukueppo/scripts.git
#          Author: kueppo

if test $(uname) != Linux; then
	echo "${0#./} should be run on a linux system" >&2
	exit 1
fi
if test $(id -u) -ne 0; then
	echo "root permission needed" >&2
	exit 1
fi

usage() {
cat<<EOF
Usage: stamina [OPTIONS]... APN
establishes a connection to a usb modem, modems
of the type /dev/ttyUSB*, /dev/ttyS*, etc. stamina
takes as mandatory argument the access point name
which depends on your service provider.
	echo
  -k, --kill  delete the network manager connection
              called "stamina" which was created
              when the usb modem was first plug-in.
EOF
}

check() {
	local toins=''

	printf 'checking dependencies ...'
	if command -v usb_modeswitch; then
		echo "warn: mode switch the usb device(usb_modeswitch)"
	else
		toins="usb_modeswitch"
	fi
	command -v ModemManager || toins="ModemManger${toins:+, }${toins}"
	command -v NetworkManager || toins="NetworkManager${toins:+, }${toins}"

	test x"$toins" = x"" && echo ok || echo failed
	if grep -q ',' <(echo $toins); then
		printf '%s and %s are needed\n' "${toins%,*}" "${toins##* }"
	else
		printf '%s is needed\n' "${toins}"
	fi
	return 1
}

servck() {
	local ecode=0

	if ! systemctl is-enabled ModemManager &>/dev/null; then
		printf 'enabling ModemManager service ...'
		systemctl enabled ModemManager && echo ok || echo failed
		((ecode++))
	fi
	if ! systemctl is-active ModemManager &>/dev/null; then
		printf 'starting ModemManger service ...'
		systemctl start ModemManager && echo ok || echo failed
		((ecode++))
	fi
	if ! systemctl is-enabled NetworkManager &>/dev/null; then
		printf 'enabling NetworkManager service ...'
		systemctl enabled NetworkManager && echo ok || echo failed
		((ecode++))
	fi
	printf 'starting NetworkManager service ...'
	systemctl restart NetworkManager && echo ok || echo failed
	test $ecode -gt 0 && return 1
}

pppcon() {
	local timeout=0

	printf 'listening to usb modems ...'
	while test "$(mmcli -L)" = "No modems were found"; do
		test $timeout = 8 && break
		sleep 4
		((timeout++))
	done
	test $timeout = 8 && echo ok || echo failed && return 1
	# get modem index
	index="$(mmcli -L | cut -d/ -f6 | cut -d ' ' -f1)"
	if grep -q '[0-9]\{1,\}' <(echo "$index"); then
		echo 'could not get modem index' >&2
		return 1
	fi
	# create a persistent connection with networkmanager
	if nmcli connection show | grep -q '^Stamina '; then
		wmsg() {
			echo 'warning: this script should be run once, it creates'
			echo 'a persistent connection to a usb modem by creating'
			echo 'an active connection with NetworkManager so run'
			echo '`stamina -k` do delete the NetworkManager active'
			echo 'connection.'
		}
		wmsg
		nmcli radio wwan on
		return 1
	fi
	pport="$(mmcli -m $index | fgrep 'primary port' | cut -d: -f2)"
	if test -c "/dev/$pport"; then
		nmcli radio wwan on
		nmcli connection add type gsm ifname "$pport" con-name "Stamina" apn '$1'
		test $? -eq 0 && printf "usb modem connection succeeded"
	fi
	return 0
}

kilcon() {
	if ! nmcli connection show | grep -q '^Stamina '; then
		echo 'connection not found' >&2
		return 1
	fi
	printf 'attempting to delete the connection ...'
	gguid=$(nmcli connection show | grep '^Stamina ' | \
		sed -n 's/^[^ ]\+ \+\([^ ]\+\).\+/\1/p')
	nmcli connection delete "$gguid" && echo ok || echo failed
	return 0
}

stamina() {
	check >&2 || exit 1
	case $# in
	0)
		usage >&2
		;;
	1)
		if test "$1" = '-k' || test "$1" = '--kill'; then kilcon; else
			printf 'connecting to a usb modem with apn "%s"\n' "$1"
			servck || return 1
			pppcon "$1" || return 1
		fi
		;;
	*)
		echo invalid number of arguments >&2
		;;
	esac
	return 0
}

##
## stamina
stamina "$@"
