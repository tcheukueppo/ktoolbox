#!/bin/sh
#
# Copyright (C) 2022 kueppo, <kueppo@paranoid.cm>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Author:  <kueppo@paranoid>
# Created: 2022-01-15

# - Global variables declaration.

# FIXME: 
# 1. wfmux skipped an unoccupied window to open a new one.
# 2. wfmux doesn't use any of the 2 panes with label 'bash' and exits

# These regexs define lines format of the command set
careg='^[a-z]+:.*$'
empty='^[\t ]*$'
comment='^[\t ]*#'

digit='^[0-9]+$'
fsh="^(${SHELL##*/}|bash|ksh|sh|dask|tcsh):.*$"

# Defines lines format in wfmux config file.
creg='^[\t ]*[-_0-9a-zA-Z]+=('"'"'.+'"'"'|".+"|[0-9]+)[\t ]*$'

config_dir="${XDG_CONFIG_HOME:-$HOME/.config}"
config="$config_dir/wfmux.conf"
sconfig="$config_dir/wfmux-cmdset"

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}"
cache="$cache_dir/wfmux-tags"

### CONFIGURABLE DATA (~/config/.wfmux.conf)
# Tag projects
tags='sh:php:golang:lua:js:c++:python:clang:bash:nodejs:django:vuejs:angularjs:mojo:bootstrap:perl:awk:bc'

# Text files
: ${EDITOR=nvim}
: ${editor=$EDITOR}

# Open audio/video files
: ${mediaplayer=ffplay}

# Open pdf files
: ${pdfviewer=zathura}

# Open image files
: ${imageviewer=feh}

# Menus can be dmenu, fzf, fzy etc.
menu=

# The directory where all the projects resides
plist="$HOME/projects"
### END

# selected tag for the choosen project
stags=

# main program to run
prog=

# whole program, aprog="$prog arg1 arg2 .... argn"
aprog=

buffer=

USAGE='

'
func_installed ()
{
	eval command -v "$1" >/dev/null || return 1
}

# The format of wfmux config should be identical to sh variable assignment.
# ex: var='val', var="val", var=2.
func_parseconfig ()
{
	test -f "$config" || return 0
	count=1
	while read line; do
		if echo "$line" | grep -qE "$creg"; then
			# This may overwrite variables declared above
			eval $line
		elif echo "$line" | grep -qE "$empty"; then :;
		elif echo "$line" | grep -qE "$comment"; then :;
		else
			echo "$0: ${config##*/}: error at line $count" >&2
			return 1
		fi
		count=$(( count + 1 ))
	done < "$config"
}

# func_setmenu chooses what menu is to be used based on their availability
# menus are fzf, fzy, and dmenu.
func_setmenu ()
{
	for smenu in fzf fzy dmenu; do
		test -n "$menu" && break
		case "$smenu" in
		fzy)   func_installed "$smenu" && menu='fzy' ;;
		fzf)	 func_installed "$smenu" && menu="fzf +m --margin=10% --header-first --header=${1:-wfmux} --border=bottom" ;;
		dmenu) func_installed "$smenu" && menu='dmenu' ;;
		esac
	done
	test -n "$menu"
}

# func_opentmux either present existing sessions to attach, create a new
# session, or drop you at the terminal, this function should be called in
# your shell initialization file.
func_opentmux ()
{
	if tmux list-sessions >/dev/null 2>&1; then
		sid=1
		echo 'Choose a session to attach'
		echo
		tmux list-sessions | while read session; do
			echo "$sid) $session"
			sid=$(( sid + 1 ))
		done
	fi

	# sadly, echo is not posix compliant so for the sake of
	# compatibility with other echos, it's preferable to avoid
	# any option and escape characters.
	echo
	echo '- Enter the name of your new tmux session'
	echo '- Type f<Return> to select your projects'
	echo '- Type <Return> to avoid tmux'
	printf ': '

	read answer && tput clear
	case "$answer" in
	F|f)
 		project=`ls -F "$plist" | sed -n 's#\(.*\)/$#\1#p' | eval $menu`
		test -z "$project" && return
 		if test -d "${plist%/}/$project"; then
	 		project=`echo "$project" | tr _ '\034' | tr . _`
			test -f "$cache" && stag=`cat "$cache" | sort -u | grep "^$project:" | cut -d: -f2`
			if test -z "$stag"; then
				stag=$(echo "$tags" | tr ':' '\n' | eval $menu)
				test -z "$stag" && return
				echo "$project:$stag" >> "$cache"
			fi
	 		if (tmux has-session -t "$project-$stag") >/dev/null 2>&1; then
				tmux attach -t "$project-$stag"
	 		else
				tmux new-session -s "$project-$stag"
			fi
 		fi
		;;
	*)
		if echo "$answer" | grep -qE "$digit"; then
			num=`tmux list-sessions | wc -l`
			if test $answer -ge 1 && test $answer -le $num; then
				target=`tmux list-sessions -F '#S' | sed -n "${answer}p"`
				tmux attach -t "$target"
			fi
		elif test -z "$answer"; then :;
		else
			tmux new-session -s "$answer"
		fi
		;;
	esac
}

func_openpane ()
{
	window=`tmux list-windows | fgrep '(active)' | cut -d: -f1`
	lpane=`tmux list-panes -t "$window" -F '#{pane_current_command}:#P:#{pane_active}'`

	msh=`echo "$lpane" | sed -nE "s,$fsh,\1,p"`
	if test -n "$msh"; then
		# try get the active idle pane first
		pane=`echo "$lpane" | grep "^$msh:[0-9]\+:1$" | cut -d: -f2`
		test -z "$pane" && pane=`echo "$lpane" | fgrep "$msh:" | head -n1 | cut -d: -f2`
		tmux send-keys -t "$window.$pane" "$aprog" C-m
	else
		npanes=`tmux list-panes -t "$window" | wc -l`
		if test $npanes -eq 1; then
			tmux split-window -h -t "$window" "$aprog"
		elif test $npanes -ge 2; then
			tmux new-window "$aprog"
		fi
	fi
}

func_runit ()
{
	if test -f "$sconfig"; then
		project=`tmux list-sessions -F '#S:#{session_activity}' | sort -b -t: -k 2,2n | tail -n1 | cut -d: -f1`
		tag="${project##*-}"
		if test -n "$tag"; then
			if grep -q "^$tag:" < "$sconfig"; then
				aprog=`cat "$sconfig" | sed -n "s/^$tag:\(.*\)/\1/p" | eval $menu`
			fi
		fi
		test -n "$aprog" && { aprog="$aprog; sleep 3600"; func_openpane; }
	fi
}

func_choosecmd ()
{
	# NOTE: The session's name should be the name of your project's directory
	project=`tmux list-sessions -F '#S:#{session_activity}' | sort -b -t: -k 2,2n | tail -n1 | cut -d: -f1`

	# If the name you want for your tmux session contains a dot(.),
	# tmux substitutes these dots to underscores which could cause
	# a problem since this name should correspond to the name of the directory
	# containing your project files. A solution to this can be to preserve
	# the integrity of the dots by translating the original underscores to '\034'.
	project=`echo "$project" | tr _ . | tr '\034' _`
	project="${project%-*}"
	project="${plist%/}/$project"

	pfile=`find "$project" -type f -a \( -path "$project/.git/*" -prune -o -print \) | sed -n "s,^$project/,open ,p" | eval $menu`
	test -n "$pfile" && echo "open $project/${pfile##open }"
}

func_openfile ()
{
	aprog=`func_choosecmd`
	test -z "$aprog" && return

	buffer=`echo "$aprog" | sed -n 's,^open \(.*\)$,\1,p'`
	test -z "$buffer" && return
	case "$buffer" in
	*.mp4 | *.ogg | *.mp3 | *.flac | *.mkv | *.avi | *.m4v | *.mpeg | *.mpg | *.webm | *.mov | *.wav | *.flv | *.wma)
		func_installed "$mediaplayer" && prog="$mediaplayer" ;;
	*.png | *.jpeg | *.jpg | *.gif | *.xpm | *.bmp)
		func_installed "$imageviewer" && prog="$imageviewer" ;;
	*.pdf | *.epub | *.djvu)
		func_installed "$pdfviewer" && prog="$pdfviewer" ;;
	*)
		func_installed "$editor" && prog="$editor"
		set -- vis kak nvim
		while test $# -ne 0 && test -z "$prog"; do
			func_installed "$1" && prog="$1"
			shift
		done ;;
	esac
	if test -n "$prog"; then
		aprog=`echo "$aprog" | sed -n "s,^open \(.*\),$prog \1,p"`
		func_openpane
	fi
}

func_setmenu
func_parseconfig || exit 1
if [ -z "$menu" ]; then
	echo "$0: No menu were found, possible menus are fzf, fzy, or dmenu." >&2
	exit 1
elif [ ! -d "$plist" ]; then
	echo "$0: directory '$plist' doesn't exit" >&2
	exit 1
fi

while getopts :ucf args; do
	case "$args" in
	u)
		func_openfile ;;
	c)
		func_runit ;;
	f)
		func_opentmux ;;
	*)
		echo "$USAGE" ;;
	esac
done
